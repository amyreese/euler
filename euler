#!/usr/bin/env python

import getopt
import os
from os import path
import shutil
from subprocess import Popen, PIPE
import sys
from time import time

languages = {
    "cpp": {
        "path": "cpp",
        "suffix": ".cpp",
        "compile": "g++ -g -Wall -o problem{n} {source}",
        "run": "./problem{n}",
        "cleanup": "rm problem{n}",
    },
    "python": {
        "path": "python",
        "suffix": ".py",
        "run": "python {source}",
    },
}

def call(command):
    time1 = time()

    proc = Popen(command.split(), stdout=PIPE, stderr=PIPE)
    stdout, stderr = proc.communicate()

    time2 = time()

    if stderr:
        print "Error executing `{0}`:".format(command)
        print stderr
        sys.exit(1)

    return stdout.strip(), (time2 - time1) * 1000

def run(number):
    global languages

    print "Executing problem #{0}...\n".format(number)

    timing = {}

    print "Output:"

    for name in languages:
        lang = languages[name]

        source = path.join(lang["path"], "problem" + number + lang["suffix"])
        
        if path.isfile(source):
            if "compile" in lang:
                command = lang["compile"].format(n=number, source=source)
                call(command)

            if "run" in lang:
                command = lang["run"].format(n=number, source=source)
                output, timing[name] = call(command)

                print "{0:<8}  {1}".format(name, output)

            if "cleanup" in lang:
                command = lang["cleanup"].format(n=number, source=source)
                call(command)

    print "\nTiming:"
    for lang in timing:
        print "{0:<8}  {1:9.1f} ms".format(lang, timing[lang])

    print

def create(number):
    global languages
    for name in languages:
        lang = languages[name]
        template = path.join(lang["path"], "template" + lang["suffix"])
        problem = path.join(lang["path"], "problem" + number + lang["suffix"])
        shutil.copy(template, problem)

def edit(number):
    global languages

    sources = []

    for name in languages:
        lang = languages[name]
        source = path.join(lang["path"], "problem" + number + lang["suffix"])

        if path.isfile(source):
            sources.append(source)

    args = ["vim", "-p"] + sources

    os.execvp("vim", args)

def main():
    options, arguments = getopt.getopt(sys.argv[1:], "ap:c:e:")

    run_all = True
    run_one = False

    for option, value in options:
        if option == "-a":
            run_all = True
            run_one = False

        elif option == "-c":
            create(value)

        elif option == "-e":
            edit(value)

        elif option == "-p":
            run_all = False
            run_one = value

        else:
            print "zomg: {0} = {1}".format(option, value)
            sys.exit(2)

    if run_all:
        pass

    else:
        run(run_one)

if __name__ == "__main__":
    main()
