#!/usr/bin/env python

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals

import getopt
import os
from os import path
import shutil
from subprocess import Popen, PIPE
import sys
from time import time

languages = {
    "cpp": {
        "path": "cpp",
        "suffix": ".cpp",
        "compile": "g++ -std=c++11 -g -Wall -o problem{n} {source}",
        "run": "./problem{n}",
        "cleanup": "rm problem{n}",
    },
    "python": {
        "path": "python",
        "suffix": ".py",
        "run": "python2 {source}",
    },
}

solutions = ["","a","b","c","d","e","f"]

def call(command, repeat=1, threshold=5000):
    times = []
    output = None

    for i in range(repeat):
        time1 = time()

        proc = Popen(command.split(), stdout=output, stderr=PIPE)
        stdout, stderr = proc.communicate()

        time2 = time()

        if stderr:
            print("Error executing `{0}`:".format(command))
            print(stderr)
            sys.exit(1)

        ms = (time2 - time1) * 1000
        times.append(ms)

        if ms > threshold:
            break

        output = PIPE

    return times

def run(number):
    global languages
    global solutions

    print("Executing problem #{0}...\n".format(number))

    timing = {}

    print("Output:")

    for name in languages:
        lang = languages[name]

        for sol in solutions:
            source = path.join(lang["path"], "problem" + number + sol + lang["suffix"])

            if path.isfile(source):
                if "compile" in lang:
                    command = lang["compile"].format(n=number, source=source)
                    call(command)

                if "run" in lang:
                    sys.stdout.write("{0:<8}  ".format(name + sol))
                    sys.stdout.flush()

                    command = lang["run"].format(n=number, source=source)
                    timing[name + sol] = call(command, repeat=3)

                if "cleanup" in lang:
                    command = lang["cleanup"].format(n=number, source=source)
                    call(command)

            else:
                break

    print("\nTiming:")
    for lang in timing:
        times = timing[lang]
        count = len(times)
        average = sum(times) / count
        variance = max(times) - min(times)

        if count > 1:
            print("{0:<8}  {1:9.1f} ms avg {2:7.1f} ms var".format(lang, average, variance))
        else:
            print("{0:<8}  {1:9.1f} ms".format(lang, average))

    print()

def create(name, number):
    global languages

    lang = languages[name]
    template = path.join(lang["path"], "template" + lang["suffix"])
    problem = path.join(lang["path"], "problem" + number + lang["suffix"])
    shutil.copy(template, problem)

def edit(number):
    global languages

    sources = []

    for name in languages:
        lang = languages[name]

        for sol in solutions:
            source = path.join(lang["path"], "problem" + number + sol + lang["suffix"])

            if path.isfile(source):
                sources.append(source)

            else:
                break

    args = ["vim", "-p"] + sources

    os.execvp("vim", args)

def main():
    global languages

    options, arguments = getopt.getopt(sys.argv[1:], "ap:c:e:")

    run_all = False
    run_one = False
    create_source = False
    edit_source = False

    for option, value in options:
        if option == "-a":
            run_all = True
            run_one = False

        elif option == "-c":
            create_source = value

        elif option == "-e":
            edit_source = value

        elif option == "-p":
            run_all = False
            run_one = value

        else:
            print("zomg: {0} = {1}".format(option, value))
            sys.exit(2)

    if create_source:
        if create_source == "all":
            for name in languages:
                create(name, run_one)
        elif create_source in languages:
            if run_one:
                create(create_source, run_one)
            elif edit_source:
                create(create_source, edit_source)
            else:
                print("Use -pX")
                sys.exit(2)
        else:
            print("Lang {0} not defined".format(create_source))
            sys.exit(2)

    if edit_source:
        edit(edit_source)

    elif run_all:
        pass

    elif run_one:
        run(run_one)

    else:
        print("a little direction, please...")

if __name__ == "__main__":
    main()
