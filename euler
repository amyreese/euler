#!/usr/bin/env python

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals

import os
import shutil
import sys

from argparse import ArgumentParser
from os import path
from subprocess import Popen, PIPE
from time import time

languages = {
    'cpp': {
        'path': 'cpp',
        'suffix': '.cpp',
        'compile': 'clang++ -std=c++11 -o problem{n} {source}',
        'run': './problem{n}',
        'cleanup': 'rm problem{n}',
    },
    'python': {
        'path': 'python',
        'suffix': '.py',
        'run': 'python2 {source}',
    },
    'swift': {
        'path': 'swift',
        'suffix': '.swift',
        'compile': 'swiftc -o problem{n} {source}',
        'run': './problem{n}',
        'cleanup': 'rm problem{n}',
    },
}

solutions = ['','a','b','c','d','e','f']

def call(command, repeat=1, threshold=5000):
    times = []
    output = None

    for i in range(repeat):
        time1 = time()

        proc = Popen(command.split(), stdout=output, stderr=PIPE)
        stdout, stderr = proc.communicate()

        time2 = time()

        if stderr:
            print('Error executing `{0}`:'.format(command))
            print(stderr)
            sys.exit(1)

        ms = (time2 - time1) * 1000
        times.append(ms)

        if ms > threshold:
            break

        output = PIPE

    return times

def run(number, repeat):
    print('Executing problem #{0}...\n'.format(number))

    timing = {}

    print('Output:')

    for name in languages:
        lang = languages[name]

        for sol in solutions:
            source = path.join(lang['path'], 'problem' + number + sol + lang['suffix'])

            if path.isfile(source):
                if 'compile' in lang:
                    command = lang['compile'].format(n=number, source=source)
                    call(command)

                if 'run' in lang:
                    sys.stdout.write('{0:<8}  '.format(name + sol))
                    sys.stdout.flush()

                    command = lang['run'].format(n=number, source=source)
                    timing[name + sol] = call(command, repeat)

                if 'cleanup' in lang:
                    command = lang['cleanup'].format(n=number, source=source)
                    call(command)

            else:
                break

    print('\nTiming:')
    for lang in timing:
        times = timing[lang]
        count = len(times)
        average = sum(times) / count
        variance = max(times) - min(times)

        if count > 1:
            print('{0:<8}  {1:9.1f} ms avg {2:7.1f} ms var'.format(lang, average, variance))
        else:
            print('{0:<8}  {1:9.1f} ms'.format(lang, average))

    print()

def create(name, number):
    lang = languages[name]
    template = path.join(lang['path'], 'template' + lang['suffix'])
    problem = path.join(lang['path'], 'problem' + number + lang['suffix'])
    shutil.copy(template, problem)

def edit(number):
    sources = []

    for name in languages:
        lang = languages[name]

        for sol in solutions:
            source = path.join(lang['path'], 'problem' + number + sol + lang['suffix'])

            if path.isfile(source):
                sources.append(source)

            else:
                break

    args = ['vim', '-p'] + sources

    os.execvp('vim', args)

def parse_args():
    command_list = sorted(['create', 'run', 'edit'])
    language_list = sorted(['all'] + languages.keys())

    parser = ArgumentParser()
    parser.add_argument('-r', '--repeat', type=int, default=3)
    parser.add_argument('command', default='run', choices=command_list)
    parser.add_argument('problem', default='all', nargs='?')
    parser.add_argument('language', default='all', nargs='?', choices=language_list)

    return parser.parse_args()

def main():
    global languages

    options = parse_args()

    if options.command == 'create':
        if options.language == 'all':
            for name in languages:
                create(name, options.problem)
        else:
            create(options.language, options.problem)

        edit(options.problem)

    elif options.command == 'edit':
        edit(options.problem)

    elif options.command == 'run':
        if options.problem == 'all':
            pass
        else:
            run(options.problem, options.repeat)

    return 0

if __name__ == '__main__':
    sys.exit(main())
