#!/usr/bin/env python

import getopt
import os
from os import path
import shutil
from subprocess import Popen, PIPE
import sys
from time import time

def call(command):
    time1 = time()

    proc = Popen(command.split(), stdout=PIPE, stderr=PIPE)
    stdout, stderr = proc.communicate()

    time2 = time()

    if stderr:
        print "Error executing `{0}`:".format(command)
        print stderr
        sys.exit(1)

    return stdout.strip(), (time2 - time1) * 1000

def run(number):
    cwd = os.getcwd()

    print "Executing problem #{0}...\n".format(number)

    timing = {}
    cpp = path.join("cpp", "problem" + number + ".cpp")
    py = path.join("python", "problem" + number + ".py")

    print "Output:"

    if path.isfile(cpp):
        command = "g++ -g -Wall -o problem{0} {1}".format(number, cpp)
        call(command)

        command = "./problem" + number
        output, timing["cpp"] = call(command)

        print "{0:<8}  {1}".format("cpp", output)

        command = "rm " + command
        call(command)

    if path.isfile(py):
        command = "python " + py
        output, timing["python"] = call(command)

        print "{0:<8}  {1}".format("python", output)

    print "\nTiming:"
    for lang in timing:
        print "{0:<8}  {1:9.1f} ms".format(lang, timing[lang])

    print

def main():
    options, arguments = getopt.getopt(sys.argv[1:], "ap:c:")

    run_all = True
    run_one = False

    for option, value in options:
        if option == "-a":
            run_all = True
            run_one = False

        elif option == "-c":
            template = path.join("cpp", "template.cpp")
            problem = path.join("cpp", "problem" + value + ".cpp")
            shutil.copy(template, problem)
            template = path.join("python", "template.py")
            problem = path.join("python", "problem" + value + ".py")
            shutil.copy(template, problem)
            sys.exit(0)

        elif option == "-p":
            run_all = False
            run_one = value

        else:
            print "zomg: {0} = {1}".format(option, value)
            sys.exit(2)

    if run_all:
        pass

    else:
        run(run_one)

if __name__ == "__main__":
    main()
